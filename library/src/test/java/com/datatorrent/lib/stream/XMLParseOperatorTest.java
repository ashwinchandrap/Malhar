/*
 * Copyright (c) 2013 DataTorrent, Inc. ALL Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.datatorrent.lib.stream;

import java.util.Map;
import junit.framework.Assert;

import org.junit.Test;

import com.datatorrent.lib.testbench.CollectorTestSink;

/**
 * Tests XMLParseOperator
 *
 * @Since 0.9.3
 */
public class XMLParseOperatorTest
{
  /**
   * Asserts the tuples generated by output port in XmlParseOperator
   */
  @Test
  @SuppressWarnings({"rawtypes", "unchecked"})
  public void testOperator()
  {
    String xml = "<?xml version=\"1.0\"?>"
            + "   <element1 id=\"101\" name=\"sample xml root element 1\" version=\"0.9\">"
            + "     <childElement1 id=\"1\" content=\"something else\" name=\"element1 child\">test1</childElement1>"
            + "     <childElement1 content=\"something\">test2</childElement1>"
            + "     <childElement2>element2</childElement2>"
            + "     <application app_name=\"bridge\" app_data=\"sofia/external/gateway/gw001/1000\">oh</application>"
            + "     <childElement10 name=\"name of element10\"></childElement10>"
            + "     <childElement1 name=\"some child name\"/>"
            + "     <childElement4 id=\"id4\" name=\"some name\">"
            + "       <childElement5 id=\"5\">ce5</childElement5>"
            + "     </childElement4>"
            + "     <childElement10 id=\"id10\" name=\"some name 10\">"
            + "       <childElement101 id=\"5\">level 3 child</childElement101>"
            + "     </childElement10>"
            + "   </element1>";

    XMLParseOperator oper = new XMLParseOperator();

    CollectorTestSink mapSink = new CollectorTestSink();

    oper.setup(null);

    oper.addElementKeys("ce2", "/element1/childElement2");
    oper.addElementKeys("ce1_1", "(/element1/childElement1)[1]");
    oper.addElementKeys("ce1_2", "(/element1/childElement1)[2]");
    oper.addElementKeys("ce1_1_Id", "(/element1/childElement1)[1]/@id");
    oper.addElementKeys("ce1_1_content", "(/element1/childElement1)[1]/@content");
    oper.addElementKeys("ce1_2_content", "(/element1/childElement1)[2]/@content");
    oper.addElementKeys("ce10_101", "/element1/childElement10/childElement101");
    oper.outputMap.setSink(mapSink);

    oper.beginWindow(0);

    // run the operator for the same string 1000 times
    int numtuples = 1000;
    for (int i = 0; i < numtuples; i++) {
      oper.byteArrayXMLInput.process(xml.getBytes());
    }

    oper.endWindow();

    // assert that the number of the operator generates is 1000
    Assert.assertEquals("number emitted tuples", numtuples, mapSink.collectedTuples.size());

    // assert that value for one of the keys in any one of the objects from mapSink is as expected
    Map<String, String> map = (Map)mapSink.collectedTuples.get(510);
    Assert.assertEquals("emitted tuple", "element2", map.get("ce2"));
    Assert.assertEquals("emitted tuple", "test1", map.get("ce1_1"));
    Assert.assertEquals("emitted tuple", "test2", map.get("ce1_2"));

    map = (Map)mapSink.collectedTuples.get(713);
    Assert.assertEquals("emitted tuple", "1", map.get("ce1_1_Id"));
    Assert.assertEquals("emitted tuple", "something else", map.get("ce1_1_content"));
    Assert.assertEquals("emitted tuple", "something", map.get("ce1_2_content"));
    Assert.assertEquals("emitted tuple", "level 3 child", map.get("ce10_101"));

  }

}
